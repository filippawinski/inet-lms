#!/usr/bin/perl -Tw

use strict;
use DBI;
use Config::IniFiles;
use Getopt::Long;
use vars qw($logfile $configfile $quiet $help $version);
use POSIX qw(strftime);

my $_version = '1.11-cvs';

my $net='';
my $netid='';
my %options = (
	"--traffic-log-file|f=s"=>	\$logfile,
	"--config-file|C=s"	=>	\$configfile,
	"--quiet|q"		=>	\$quiet,
	"--net|n=s"		=>	\$net,
	"--help|h"		=>	\$help,
	"--version|v"		=>	\$version,
);

Getopt::Long::config("no_ignore_case");
GetOptions(%options);

if($help)
{
	print STDERR <<EOF;
lms-traffic, version $_version
(C) 2001-2012 LMS Developers + zmiany by Paweł Adamczewski (c) 2016

-f, --traffic-log-file=/var/log/traffic.log	traffic log file (default: /var/log/traffic.log);
-C, --config-file=/etc/lms/lms.ini	alternate config file (default: /etc/lms/lms.ini);
-n, --network=NETWORK_NAME	run on NETWORK_NAME only
-h, --help			print this help and exit;
-v, --version			print version info and exit;
-q, --quiet			suppress any output, except errors;

EOF
	exit 0;
}

if($version)
{
	print STDERR <<EOF;
lms-traffic, version $_version
(C) 2001-2012 LMS Developers + zmiany by Paweł Adamczewski (c) 2016

EOF
	exit 0;
}

if(!$configfile)
{
	$configfile = "/etc/lms/lms.ini";
}

if(!$quiet)
{
	print STDOUT "lms-traffic, version $_version\n";
	print STDOUT "(C) 2001-2012 LMS Developers + zmiany by Paweł Adamczewski (c) 2016\n";
	print STDOUT "Using file $configfile as config.\n";
}

if(! -r $configfile)
{
	print STDERR "Fatal error: Unable to read configuration file $configfile, exiting.\n";
	exit 1;
}

if(!$logfile)
{
	$logfile = "/var/log/traffic.log";
}

if(! -r $logfile)
{
	print STDERR "Fatal error: Unable to read log file $logfile, exiting.\n";
	exit 1;
}

my $ini = new Config::IniFiles -file => $configfile;
print @Config::IniFiles::errors;

my $dbtype = $ini->val('database', 'type') || 'mysql';
my $dbhost = $ini->val('database', 'host') || 'localhost';
my $dbuser = $ini->val('database', 'user') || 'root';
my $dbpasswd = $ini->val('database', 'password') || '';
my $dbname = $ini->val('database', 'database') || 'lms';

my $dbase;
my $utsfmt;

if($dbtype =~ /mysql/)
{
	$dbase = DBI->connect("DBI:mysql:database=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1 });
	$utsfmt = "UNIX_TIMESTAMP()";
}
elsif($dbtype eq "postgres")
{
	$dbase = DBI->connect("DBI:Pg:dbname=$dbname;host=$dbhost","$dbuser","$dbpasswd", { RaiseError => 1, AutoCommit => 0 });
	$utsfmt = "EXTRACT(EPOCH FROM CURRENT_TIMESTAMP(0))";
}
else
{
	print STDERR "Fatal error: unsupported database type: $dbtype, exiting.\n";
	exit 1;
}


# get net ID
my $dbq1 = $dbase->prepare("SELECT id FROM networks WHERE name = '".$net."'");
$dbq1->execute();
if (my $row = $dbq1->fetchrow_hashref())
{    
    $netid=$row->{'id'};
}
my $netsearch;
if ($net) {
    if (!$netid) {
	print STDERR "Fatal error: can't find network ".$net;
	exit 1;
    }
    $netsearch="WHERE netid=$netid";
}

# get nodes IDs table
my $dbq = $dbase->prepare("SELECT id, inet_ntoa(ipaddr) AS ipaddr FROM nodes $netsearch");
$dbq->execute();
my %table;      
while (my $row = $dbq->fetchrow_hashref())
{    
    $table{$row->{'ipaddr'}} = $row->{'id'};
    print($row->{'id'}."\n");
}

# read log file
open(LOGFILE, $logfile); 	
my(@lines) = <LOGFILE>;   
close(LOGFILE);

my %data;

# insert data to lms database 
foreach my $line (@lines)           
{
	my ($ip,$upload,$download) = split('[\t\s]+',$line);                 
	if( $table{$ip} )   # if IP is in our database then we can insert
	{
		if( $upload || $download ) # don't need zeroes 
		{
			$data{$ip}{'download'} += $download;
			$data{$ip}{'upload'} += $upload;
			
			if(!$quiet)
    			{
				print "IP: $ip\tSend: $upload\t Recv: $download\n";
			}
		} else
		{
			print "IP: $ip\tSkipped - null data\n";
		}
	} 
	else 
	{
		if(!$quiet)
		{
			print "IP: $ip\tSkipped - not in database\n";
		}
	}
}

while (my ($ip,$record) = each %data)
{
	$dbq = $dbase->prepare("INSERT INTO stats (nodeid, dt, download, upload) VALUES ( $table{$ip} , $utsfmt, $record->{'download'}, $record->{'upload'})");
	$dbq->execute();
}

$dbase->commit;
# finally 
$dbq->finish();
$dbase->disconnect();
